#+title: Envelope Budgeting with [[https://hledger.org/][hledger]]
#+PROPERTY: header-args :tangle "~/finance/envelope.hledger"

This file describes and implements an envelope budgeting system for [[https://hledger.org/][hledger]].
The ledger snippets herein are tangled to =envelope.hledger= to be included into a journal.

* Filling the Budget
We separate our assets into two kinds of accounts, "on budget" and "off budget". On budget accounts are named as follows: =assets:b:*=. So, we want our budget total to always equal the total of the accounts matching this pattern. We do this with the following auto posting. We also declare our budget account here.

#+begin_src ledger
account budget
= ^assets:b:
    (budget)    *1
#+end_src

This adds an unmatched virtual transaction (note the =()=) to any posting that occurs to a =assets:b= account, matching the amount and sign directly into the top level =budget= account.

* Credit Cards
We always want to have money set aside to pay off all credit cards in our budget. These will go into the =budget:spend:cc= account. Our credit card accounts are all named as =liabilities:cc:*=, so we want to inversely match any posting which occurs to such an account into our =budget:spend:cc= account. We use matching virtual postings (note the =[]=) because we want the money going to/coming from the credit card budget to come from/go to the top level budget (as this is where money will go to from a envelope when a purchase is made with a credit card).

The following auto posting accomplishes this.

#+begin_src ledger
account budget:spend:cc
= ^liabilities:cc
    [budget]            *1
    [budget:spend:cc]   *-1
#+end_src

* Envelopes
Finally, we define our envelopes. Unfortunately, this is somewhat tedious as we need an auto posting for each envelope. We will use emacs lisp to generate these dynamically, but the basic pattern is as follows:

#+begin_src ledger :tangle no
= ^expenses:envelope
    [budget:spend:envelope]  *-1
#+end_src

This means that for any posting which affects an expense account with the envelope name (including subaccounts like =expenses:envelope:subaccount=), there will be a transfer from that spending envelope to the top level =budget= account. The credit card rule or the assets rules (defined above) will then transfer that money out of that top level =budget= account.

** Dynamically Generate Auto Postings for Envelopes
As described above, we have to create separate auto-postings for each envelope. This is tedious and error prone, so lets generate them dynamically.

Here, I define an emacs lisp expression which takes a =envelope= as input and returns the string of the auto posting rule, as well as a couple account declarations.

#+name: generate-envelope
#+begin_src emacs-lisp :var envelope="default" :tangle no
(message
 "
account expenses:%1$s
account budget:spend:%1$s
= ^expenses:%1$s
    [budget:spend:%1$s]    *-1
"
 envelope
 )
#+end_src

Now, we can use this rule with =noweb= inside of =ledger= source blocks.

** Defining Envelopes
Here, I define all my envelopes and give a description of the sort of transactions which should use them.

*** Food
Food is for groceries and dining.

#+begin_src ledger :noweb yes
<<generate-envelope(envelope="food")>>
#+end_src

*** Transportation
This is for any transportation costs. This will usually be gas, but could include public transit costs or parking fees (not tickets), plane tickets, etc.

#+begin_src ledger :noweb yes
<<generate-envelope(envelope="transportation")>>
#+end_src

*** Supplies
Supplies is a catch all envelope for purchases of household items such as cleaning supplies, dishware, etc. Generally these will be essential items rather than discretionary purchases. These can either be durable items or consumable, though this may be specified using expense subaccounts for tracking.

#+begin_src ledger :noweb yes
<<generate-envelope(envelope="supplies")>>
#+end_src

*** Maintenance
Maintenance funds should be used for fixing things. This will usually be car maintenance.

#+begin_src ledger :noweb yes
<<generate-envelope(envelope="maintenance")>>
#+end_src

*** Rent
Rent funds should be used for monthly rent.

#+begin_src ledger :noweb yes
<<generate-envelope(envelope="rent")>>
#+end_src

*** Fixed
Fixed funds should only be used for fixed costs (which don't fit in a different envelope). This includes car insurance, internet and cell service, car registration, etc.

#+begin_src ledger :noweb yes
<<generate-envelope(envelope="fixed")>>
#+end_src

*** Health
Health funds should be used for healthcare purchases.

#+begin_src ledger :noweb yes
<<generate-envelope(envelope="health")>>
#+end_src

*** Subscriptions
Subscriptions funds should be used for various subscriptions. Including streaming, software, deliveries, or membership fees.

#+begin_src ledger :noweb yes
<<generate-envelope(envelope="subscriptions")>>
#+end_src

*** Investing
Investing should be a holding area for funds which will be invested. These will generally be set up as automatic deposits.

Investing is a special case because funds don't transfer to an expense account but rather to another asset account. We can't use the envelope pattern we've used for other envelopes because it would add a negative balance to the budget on the initial opening balance transaction.

Instead, we set up an investing subaccount on one of our asset accounts. This will be the real account from which transfers to investing accounts will be made. In my case, this is my =assets:b:co:saving= account. This subaccount will always be empty, but we can use it when making a transfer to an investment account.

In the common case of an investment transaction from the investment subaccount to an investment asset account, the auto posting will do the following:

- As a real transaction, move money from the upper level =assets:b:co:saving= account to its =investing= subaccount to cover the transfer.
- Also, move money from the =investing= envelope to the top level =budget= account to cover the transfer created out of =budget= (by a previous auto posting)

TODO: might need to use tags, this breaks my invariant of using only real asset accounts in the main journal. Also, list out these invariants somewhere formal.

#+begin_src ledger
account assets:b:co:saving:investing
account budget:spend:investing
= ^assets:b:co:saving:investing
    assets:b:co:saving:investing  *-1
    assets:b:co:saving  *1
    [budget:spend:investing]  *1
    [budget]
#+end_src

*** Donations
Donations funds are broad, they can be used for donations to charitable causes, or to open source development projects/developers. Anything where there isn't a direct benefit to myself.

#+begin_src ledger :noweb yes
<<generate-envelope(envelope="donations")>>
#+end_src

*** Gifts
Gifts funds should be used to make purchases intended to benefit others. This is distinct from Donations in that gifts should benefit people people I know personally.

#+begin_src ledger :noweb yes
<<generate-envelope(envelope="gifts")>>
#+end_src

*** QOL
QOL (or "Quality of Life") is a broad catch all category. Vaguely, these funds should be used for self-improvement, broadly considered. I consider this broad enough to be used for new (utilitarian) clothes, haircuts, books, etc. Purchases that are necessary but don't fit in "Supplies" can go here. This is not for discretionary funds, it shouldn't be used for impulse purchases.

#+begin_src ledger :noweb yes
<<generate-envelope(envelope="qol")>>
#+end_src

*** Discretionary
Discretionary funds can be used for anything.

#+begin_src ledger :noweb yes
<<generate-envelope(envelope="discretionary")>>
#+end_src

*** Savings Envelopes
Savings envelopes are ones which aren't meant to be spent from, they should only be used to set aside money until it is to be spent. Once it is to be spent, it should be moved to a spending envelope.

We declare our savings envelopes here.

TODO: we want to figure out how we could make these "ephemeral", so that once the goal is achieved, the account can go away. Maybe we can just remove every instance of these accounts once they aren't needed, pretending it never existed?

#+begin_src ledger
account budget:save:replacement:car
account budget:save:replacement:laptop
account budget:save:replacement:phone
#+end_src

** Catching Unmatched Expenses
Because we manually create auto posting rules for expenses, there is no guarantee that all expenses will match one of the rules. So, we need one final rule to catch any uncaught expenses.

This rule matches out the =[budget:spend:envelope]  *-1= posting from each of the auto postings. However, if there is a transaction which doesn't match one of those auto postings, it will not have such a posting. So, hledger will warn of an unmatched transaction, and we can go fix it by amending the expense to one which will match one of the envelope rules.

#+begin_src ledger
= ^expenses:
    [budget]              *1
#+end_src

* Using the envelopes
We use the file =budget.journal= for all budget bookkeeping (initializing envelope amounts, transferring between envelopes, allocating income, etc). In general, the primary =current.journal= should include *no* entries which reference budget accounts. This way, the =include envelope.hledger= directive can be removed, and the ledger is still perfectly usable. This is useful when archiving ledgers, the envelopes aren't relevant, but the expense, asset, etc reports likely are. We include the =budget.journal= file below, this way that file is always included when the envelope system is included.

#+begin_src ledger
include budget.journal
account assets:b
#+end_src

** Initializing envelopes
In order to initialize envelopes, first initialize accounts in the =current.journal= and note the total amount in =assets:b= subaccounts (or in the =budget= account, if we've included =envelope.hledger=), this is the budgetable amount. Then, create a =budget.journal= account, and add an initialization transaction as below:

#+begin_src ledger :tangle no
2025-01-24 opening budget
    [budget]
    [budget:spend:food]            $200
    [budget:spend:transportation]  $75
    [budget:spend:supplies]        $30
#+end_src

This distributes $305 to the =food=, =transportation=, and =supplies= envelopes from the =budget= account, which has been filled from the =assets:b= accounts by the earlier auto posting.

Allocating a new paycheck/income follows exactly the same process: enter the income transaction in =current.journal=, note the new balance of =budget=, and allocate that money as just above.

** Moving Money
Sometimes we may need to reallocate funds from one envelope to another. This is done trivially as any other transaction (but, again, should be done in =budget.journal= instead of =current.journal=):

#+begin_src ledger :tangle no
2025-01-27 budget reallocation
    [budget:spend:supplies]  $10
    [budget:spend:food]
#+end_src
